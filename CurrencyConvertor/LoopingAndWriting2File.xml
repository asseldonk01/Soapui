<?xml version="1.0" encoding="UTF-8"?>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LoopingAndWriting2File" searchProperties="true" id="89dc30f8-454a-4631-a472-13d14e73b5a2" xmlns:con="http://eviware.com/soapui/config">
      <con:settings><con:setting id="89dc30f8-454a-4631-a472-13d14e73b5a2fileName">LoopingAndWriting2File</con:setting></con:settings>
      <con:testStep type="properties" name="LoopProperties" id="61c2c83e-7ec4-49fa-aedf-b152157e70b4" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>maxLoops</con:name>
              <con:value>4</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="initialiseFile" id="9980deed-860c-41a6-ade7-538277583d14">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def filename = testRunner.testCase.getPropertyValue( "fileName" )

//def fileName = testRunner.testCase.getPropertyValue( "FileName" )
//def soapResponse = groovyUtils.getXmlHolder( "Claim#Response" )
//def inhoud = soapResponse.getNodeValue("//Inhoud/text()")
 
//def decodedBytes = inhoud.decodeBase64()
 
File of = new File(projectDir + "/Output/"+filename)
if (of.exists()) {
	of.delete()
}

of.write('&lt;?xml version="1.0" encoding="UTF-8"?>')

//FileOutputStream osf = new FileOutputStream(of); 
 
//osf.write(decodedBytes); 
//osf.flush();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="ConversionRate" id="8277f476-36ea-4bab-af1f-5750aca4b437">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CurrencyConvertorSoap12</con:interface>
          <con:operation>ConversionRate</con:operation>
          <con:request name="ConversionRate" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b1f2ef4f-c722-44c2-844a-1bc89003e46b" defaultOutgoingWss="" defaultIncomingWss="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="MyCoolHeader" value="TheCoolestValue" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://www.webservicex.com/currencyconvertor.asmx</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET/">
   <soap:Header/>
   <soap:Body>
      <web:ConversionRate>
         <web:FromCurrency>EUR</web:FromCurrency>
         <web:ToCurrency>USD</web:ToCurrency>
      </web:ConversionRate>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="34109aab-be65-417f-9adc-19a00b521ac3"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="77da6804-323d-4cb2-8b87-c9ecb86f1313">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f5d52037-20ff-4325-810b-1e4839031882"/>
            <con:assertion type="XQuery Match" name="XQuery Match" id="68aaf6f0-c0d5-42d1-80d6-9f8b0257f800">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ConversionRateResult]" id="a5fdb2ab-18b3-4069-834c-c05541456de0">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns1"] = "http://www.webserviceX.NET/"
def node = holder.getDomNode( "//ns1:ConversionRateResponse[1]/ns1:ConversionRateResult[1]" )

assert node != null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/CurrencyConvertorSoap/ConversionRateRequest"/>
            <con:wsrmConfig version="1.2"/>
          <con:environmentSpec><con:entry environmentId="32604c2b-e809-44a8-b0dc-cd6f0aeb4019"><con:authProfile>Basic</con:authProfile></con:entry></con:environmentSpec></con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="append2File" disabled="true" id="97b2095d-7df7-420d-8ecc-2d4505f1314b">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def filename = testRunner.testCase.getPropertyValue( "fileName" )

//def lastResult = testRunner.getResults().last()
//def lastResultName = lastResult.getTestStep().getLabel().toString()
//def request = groovyUtils.getXmlHolder(lastResultName + "#Request")
//def response = groovyUtils.getXmlHolder("lastResultName + "#Response")
def holderResponse = groovyUtils.getXmlHolder("ConversionRate#Response")

// De gehele XML van de response
log.info holderResponse.getXml()

// De gehele XML van de response
//log.info holderResponse.getXml('//ns1:ConversionRateResult')
//log.info holderResponse.getXml("#ConversionRateResult")
//log.info holderResponse.getDomNode("//ns1:ConversionRateResult")
use (groovy.xml.dom.DOMCategory) {
	for( node in holderResponse.getDomNodes( "//ns1:ConversionRateResult" )) {
        node.children().each { child ->
            log.info child
            //println child
        }
	}
}

//def holderXml = groovyUtils.getXml("ConversionRate#Response['//ns1:ConversionRateResponse']")
//def node = response.getNodeValue("//ns1:ConversionRateResponse/ns1:ConversionRateResult")
//log.info node

// De specifieke waarde bij een veld
//log.info holderResponse.getNodeValue("//ns1:ConversionRateResponse/ns1:ConversionRateResult")
//log.info holderResponse['//ns1:ConversionRateResponse/ns1:ConversionRateResult']
 
//File of = new File(projectDir + "/Output/"+filename)
//if (of.exists()) {
	//of.append(node)
	//of.append(response['//ConversionRate'].getXml())
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="append2File-2" id="c06f8dfe-f300-4039-88ba-217a55ce7907">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def filename = testRunner.testCase.getPropertyValue( "fileName" )
 
File of = new File(projectDir + "/Output/"+filename)
if (of.exists()) {
	of.append('This is another append')
	//of.append(response['//ConversionRate'].getXml())
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="9b9a1432-f48b-4f5c-92db-eea111711727">
        <con:settings/>
        <con:config>
          <script>if( context.loopIndex == null ) {
   context.loopIndex = 0  
}

def maxLoops = testRunner.testCase.getPropertyValue( "maxLoops" )
//log.info '${maxLoops}'.toInteger()

//log.info ${LoopProperties#maxLoops}

//if( ++context.loopIndex &lt; ${#TestCase#maxLoops} )
//  testRunner.gotoStepByName( "ConversionRate" )

//if( ++context.loopIndex &lt; context.maxLoops )
//  testRunner.gotoStepByName( "ConversionRate" )

if( ++context.loopIndex &lt; maxLoops.toInteger() )
  testRunner.gotoStepByName( "ConversionRate" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script" disabled="true" id="8d499fd9-d9b7-4174-a80a-6474c23e3527">
        <con:settings/>
        <con:config>
          <script>import org.custommonkey.xmlunit.*
import static org.junit.Assert.assertEquals
 
XMLUnit.setIgnoreWhitespace(true)
XMLUnit.setIgnoreComments(true)
XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true)
XMLUnit.setNormalizeWhitespace(true)
 
def expectedXML = testRunner.testCase.getPropertyValue( "expectedContent" )
 
def actualXML = testRunner.testCase.getPropertyValue( "xmlContent" )
 
//XMLUnit.compareXML(expectedXml, actualXml)
 
def xmlDiff = new Diff(actualXML, expectedXML)
//assert xmlDiff.similar()

// Allow only one difference
def detailedDiff = new DetailedDiff(xmlDiff)    
def differences = detailedDiff.getAllDifferences()
log.info differences.size()
assertEquals detailedDiff.toString(), 1, differences.size()

// Only one difference, check that is the expected difference
def location = differences.pop().getTestNodeDetail().getXpathLocation()
log.info location
// a regex may be better for this?
// def expectedLocation = '/ns1:ConversionRateResponse[1]/ns1:ConversionRateResult[1]'
//assertEquals expectedLocation, location

//  '/person[1]/employment[1]/company[1]/text()[1]'

//declare namespace ns1='http://www.webserviceX.NET/';
//ns1:ConversionRateResponse[1]/ns1:ConversionRateResult[1]</script>
        </con:config>
      </con:testStep>
      <con:testStep type="assertionteststep" name="Assertion TestStep" disabled="true" id="5bed2724-a2d2-47f4-9ee8-f690c4c24fce">
        <con:settings/>
        <con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:entry>
            <con:id>5d1e1174-e978-404e-8071-38435cb0a3bc</con:id>
            <con:isGroup>false</con:isGroup>
            <con:sourceId>8277f476-36ea-4bab-af1f-5750aca4b437</con:sourceId>
            <con:propertyName>Response</con:propertyName>
            <con:assertion type="XPath Match" name="XPath Match"/>
          </con:entry>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>fromCurrency</con:name>
          <con:value>EUR</con:value>
        </con:property>
        <con:property>
          <con:name>expectedContent</con:name>
          <con:value><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">    <soap:Body>       <ConversionRateResponse xmlns="http://www.webserviceX.NET/">          <ConversionRateResult>1.3748</ConversionRateResult>       </ConversionRateResponse>    </soap:Body> </soap:Envelope>]]></con:value>
        </con:property>
        <con:property>
          <con:name>xmlContent</con:name>
          <con:value><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">    <soap:Body>       <ConversionRateResponse xmlns="http://www.webserviceX.NET/">          <ConversionRateResult>1.3749</ConversionRateResult>       </ConversionRateResponse>    </soap:Body> </soap:Envelope>]]></con:value>
        </con:property>
        <con:property>
          <con:name>fileName</con:name>
          <con:value>writeandappend2file.xml</con:value>
        </con:property>
        <con:property>
          <con:name>maxLoops</con:name>
          <con:value>3</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>16a45bfa-ffb5-4dac-99ca-d29de768504c</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>bec5e086-0d84-4760-9f63-c39663253b45</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>90a43fec-f609-4288-a52e-10170e04abdc</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>c06f8dfe-f300-4039-88ba-217a55ce7907</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>9b9a1432-f48b-4f5c-92db-eea111711727</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>61c2c83e-7ec4-49fa-aedf-b152157e70b4</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>